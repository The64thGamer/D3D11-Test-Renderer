// File generated by "Obj2Header.exe" [Version 1.7] Author: L.Norri CD CGS Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _green_vertexcount_
const unsigned green_vertexcount = 64;
#define _green_vertexcount_
#endif
#ifndef _green_indexcount_
const unsigned green_indexcount = 180;
#define _green_indexcount_
#endif
#ifndef _green_materialcount_
const unsigned green_materialcount = 2;
#define _green_materialcount_
#endif
#ifndef _green_meshcount_
const unsigned green_meshcount = 2;
#define _green_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	float pos[3]; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	float uvw[3]; // D3D/Vulkan style top left 0,0 coordinate.
	float nrm[3]; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _green_data_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT green_data[64] =
{
	{	{ 0.144401f, -4.413216f, -0.015608f },	{ 0.449736f, 0.131880f, 0.000000f },	{ -0.499800f, -0.030200f, 0.865600f }	},
	{	{ 0.169836f, -4.413216f, -0.000923f },	{ 0.448985f, 0.131880f, 0.000000f },	{ -0.499800f, -0.030200f, 0.865600f }	},
	{	{ 0.016796f, -0.451680f, 0.049085f },	{ 0.448460f, 0.098369f, 0.000000f },	{ -0.499800f, -0.030200f, 0.865600f }	},
	{	{ -0.077673f, -0.451680f, -0.005457f },	{ 0.450261f, 0.098369f, 0.000000f },	{ -0.499800f, -0.030200f, 0.865600f }	},
	{	{ 0.016796f, -0.451680f, 0.049085f },	{ 0.448460f, 0.098369f, 0.000000f },	{ 0.499800f, 0.030200f, -0.865600f }	},
	{	{ 0.169836f, -4.413216f, -0.000923f },	{ 0.448985f, 0.131880f, 0.000000f },	{ 0.499800f, 0.030200f, -0.865600f }	},
	{	{ 0.144401f, -4.413216f, -0.015608f },	{ 0.449736f, 0.131880f, 0.000000f },	{ 0.499800f, 0.030200f, -0.865600f }	},
	{	{ -0.077673f, -0.451680f, -0.005457f },	{ 0.450261f, 0.098369f, 0.000000f },	{ 0.499800f, 0.030200f, -0.865600f }	},
	{	{ 0.461492f, 0.605995f, -0.278002f },	{ 0.440161f, 0.125474f, 0.000000f },	{ 0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.461492f, 0.605995f, 0.274388f },	{ 0.443566f, 0.130032f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.558473f, 0.115263f, 0.330379f },	{ 0.436259f, 0.131880f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ 0.558473f, 0.115263f, -0.333993f },	{ 0.432164f, 0.126398f, 0.000000f },	{ 0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.495274f, 0.605995f, -0.278002f },	{ 0.443566f, 0.111799f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.016891f, 0.605995f, -0.554196f },	{ 0.440161f, 0.116358f, 0.000000f },	{ 0.000000f, 0.443300f, -0.896400f }	},
	{	{ -0.016891f, 0.115263f, -0.666179f },	{ 0.432164f, 0.115434f, 0.000000f },	{ 0.000000f, -0.126100f, -0.992000f }	},
	{	{ -0.592255f, 0.115263f, -0.333993f },	{ 0.436259f, 0.109951f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.016891f, 0.605995f, 0.550583f },	{ 0.421164f, 0.113730f, 0.000000f },	{ 0.000000f, 0.443300f, 0.896400f }	},
	{	{ -0.495274f, 0.605995f, 0.274388f },	{ 0.425989f, 0.121465f, 0.000000f },	{ -0.776300f, 0.443300f, 0.448200f }	},
	{	{ -0.592255f, 0.115263f, 0.330379f },	{ 0.419742f, 0.126451f, 0.000000f },	{ -0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.016891f, 0.115263f, 0.662567f },	{ 0.413938f, 0.117148f, 0.000000f },	{ 0.000000f, -0.126100f, 0.992000f }	},
	{	{ 0.461492f, 0.605995f, 0.274388f },	{ 0.418202f, 0.110206f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.558473f, 0.115263f, 0.330379f },	{ 0.410375f, 0.112910f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.495274f, 0.605995f, -0.278002f },	{ 0.427852f, 0.125675f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.592255f, 0.115263f, -0.333993f },	{ 0.421981f, 0.131515f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.317745f, 0.818227f, -0.175505f },	{ 0.435747f, 0.095102f, 0.000000f },	{ -0.423300f, 0.872400f, -0.244400f }	},
	{	{ -0.016891f, 0.818227f, -0.349203f },	{ 0.430781f, 0.097968f, 0.000000f },	{ 0.000000f, 0.872400f, -0.488800f }	},
	{	{ -0.016891f, 0.605995f, -0.554196f },	{ 0.427852f, 0.096277f, 0.000000f },	{ 0.000000f, 0.443300f, -0.896400f }	},
	{	{ -0.495274f, 0.605995f, -0.278002f },	{ 0.435747f, 0.091719f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.016891f, 0.818227f, 0.345591f },	{ 0.424817f, 0.113445f, 0.000000f },	{ 0.000000f, 0.872400f, 0.488800f }	},
	{	{ -0.317745f, 0.818227f, 0.171892f },	{ 0.427852f, 0.118309f, 0.000000f },	{ -0.423300f, 0.872400f, 0.244400f }	},
	{	{ 0.283964f, 0.818227f, 0.171892f },	{ 0.435747f, 0.106568f, 0.000000f },	{ 0.423300f, 0.872400f, 0.244400f }	},
	{	{ -0.016891f, 0.818227f, 0.345591f },	{ 0.440712f, 0.103702f, 0.000000f },	{ 0.000000f, 0.872400f, 0.488800f }	},
	{	{ -0.016891f, 0.605995f, 0.550583f },	{ 0.443642f, 0.105393f, 0.000000f },	{ 0.000000f, 0.443300f, 0.896400f }	},
	{	{ 0.461492f, 0.605995f, 0.274388f },	{ 0.435747f, 0.109951f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ -0.016891f, 0.818227f, -0.349203f },	{ 0.444585f, 0.118049f, 0.000000f },	{ 0.000000f, 0.872400f, -0.488800f }	},
	{	{ 0.283964f, 0.818227f, -0.175505f },	{ 0.444585f, 0.123783f, 0.000000f },	{ 0.423300f, 0.872400f, -0.244400f }	},
	{	{ -0.317745f, 0.818227f, 0.171892f },	{ 0.440712f, 0.097968f, 0.000000f },	{ -0.423300f, 0.872400f, 0.244400f }	},
	{	{ -0.495274f, 0.605995f, 0.274388f },	{ 0.443642f, 0.096277f, 0.000000f },	{ -0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.283964f, 0.818227f, -0.175505f },	{ 0.430781f, 0.103702f, 0.000000f },	{ 0.423300f, 0.872400f, -0.244400f }	},
	{	{ 0.461492f, 0.605995f, -0.278002f },	{ 0.427852f, 0.105393f, 0.000000f },	{ 0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.378925f, -0.260158f, 0.226717f },	{ 0.412185f, 0.094180f, 0.000000f },	{ 0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.378925f, -0.260158f, -0.230330f },	{ 0.409885f, 0.101363f, 0.000000f },	{ 0.725900f, -0.545400f, -0.419100f }	},
	{	{ 0.558473f, 0.115263f, -0.333993f },	{ 0.406541f, 0.102089f, 0.000000f },	{ 0.859100f, -0.126100f, -0.496000f }	},
	{	{ 0.558473f, 0.115263f, 0.330379f },	{ 0.409885f, 0.091647f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.016891f, -0.260158f, -0.458854f },	{ 0.414956f, 0.106947f, 0.000000f },	{ 0.000000f, -0.545400f, -0.838200f }	},
	{	{ -0.412705f, -0.260158f, -0.230330f },	{ 0.422327f, 0.105347f, 0.000000f },	{ -0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.592255f, 0.115263f, -0.333993f },	{ 0.424628f, 0.107880f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.016891f, 0.115263f, -0.666179f },	{ 0.413913f, 0.110206f, 0.000000f },	{ 0.000000f, -0.126100f, -0.992000f }	},
	{	{ -0.016891f, -0.260158f, 0.455242f },	{ 0.409398f, 0.121997f, 0.000000f },	{ 0.000000f, -0.545400f, 0.838200f }	},
	{	{ -0.412705f, -0.260158f, 0.226717f },	{ 0.413391f, 0.128397f, 0.000000f },	{ -0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.378925f, -0.260158f, 0.226717f },	{ 0.406947f, 0.119081f, 0.000000f },	{ 0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.378925f, -0.260158f, -0.230330f },	{ 0.427852f, 0.124687f, 0.000000f },	{ 0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.016891f, -0.260158f, -0.458854f },	{ 0.427852f, 0.117144f, 0.000000f },	{ 0.000000f, -0.545400f, -0.838200f }	},
	{	{ -0.412705f, -0.260158f, -0.230330f },	{ 0.414931f, 0.131880f, 0.000000f },	{ -0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.234759f, -0.514524f, 0.123979f },	{ 0.408739f, 0.129300f, 0.000000f },	{ -0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.016891f, -0.514524f, 0.249767f },	{ 0.406541f, 0.125777f, 0.000000f },	{ 0.000000f, -0.846200f, 0.532800f }	},
	{	{ -0.016891f, -0.514524f, 0.249767f },	{ 0.418523f, 0.095809f, 0.000000f },	{ 0.000000f, -0.846200f, 0.532800f }	},
	{	{ 0.200977f, -0.514524f, 0.123979f },	{ 0.414465f, 0.096690f, 0.000000f },	{ 0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.016891f, -0.260158f, 0.455242f },	{ 0.419557f, 0.092580f, 0.000000f },	{ 0.000000f, -0.545400f, 0.838200f }	},
	{	{ 0.200977f, -0.514524f, -0.127593f },	{ 0.413199f, 0.100644f, 0.000000f },	{ 0.461400f, -0.846200f, -0.266400f }	},
	{	{ -0.016891f, -0.514524f, -0.253379f },	{ 0.415990f, 0.103718f, 0.000000f },	{ 0.000000f, -0.846200f, -0.532800f }	},
	{	{ -0.234759f, -0.514524f, -0.127593f },	{ 0.420048f, 0.102837f, 0.000000f },	{ -0.461400f, -0.846200f, -0.266400f }	},
	{	{ -0.234759f, -0.514524f, 0.123979f },	{ 0.421314f, 0.098883f, 0.000000f },	{ -0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.412705f, -0.260158f, 0.226717f },	{ 0.424628f, 0.098164f, 0.000000f },	{ -0.725900f, -0.545400f, 0.419100f }	},
};
#define _green_data_
#endif
#ifndef _green_indicies_
// Index Data follows: Sequential by mesh, Every Three Indicies == One Triangle.
const unsigned int green_indicies[180] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 16, 19,
	 21, 20, 19,
	 13, 8, 11,
	 14, 13, 11,
	 17, 22, 23,
	 18, 17, 23,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 17,
	 16, 28, 17,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 8,
	 13, 34, 8,
	 36, 24, 27,
	 37, 36, 27,
	 38, 30, 33,
	 39, 38, 33,
	 38, 25, 24,
	 30, 38, 24,
	 31, 30, 24,
	 36, 31, 24,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 19, 18,
	 49, 48, 18,
	 48, 50, 21,
	 19, 48, 21,
	 51, 52, 14,
	 11, 51, 14,
	 53, 49, 18,
	 23, 53, 18,
	 54, 55, 48,
	 49, 54, 48,
	 56, 57, 40,
	 58, 56, 40,
	 59, 60, 44,
	 41, 59, 44,
	 61, 62, 63,
	 45, 61, 63,
	 57, 59, 41,
	 40, 57, 41,
	 60, 61, 45,
	 44, 60, 45,
	 61, 60, 59,
	 62, 61, 59,
	 56, 62, 59,
	 57, 56, 59,
};
#define _green_indicies_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	float       Kd[3]; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	float       Ks[3]; // specular reflectivity
	float       Ns; // specular exponent
	float       Ka[3]; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	float       Tf[3]; // transmission filter
	float       Ni; // optical density (index of refraction)
	float       Ke[3]; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _green_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL green_materials[2] =
{
	{
		{{ 0.600000f, 0.600000f, 0.600000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.500000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"default",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material",
		"a.png",
		"",
		"",
		"",
		"",
		"a.png",
		"",
		"",
		"",
	},
};
#define _green_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _green_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indicies array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int green_batches[2][2] =
{
	{ 0, 0 },
	{ 180, 0 },
};
#define _green_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _green_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH green_meshes[2] =
{
	{
		"default",
		0,
		0,
		0,
	},
	{
		"default",
		180,
		0,
		1,
	},
};
#define _green_meshes_
#endif
