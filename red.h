// File generated by "Obj2Header.exe" [Version 1.7] Author: L.Norri CD CGS Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _red_vertexcount_
const unsigned red_vertexcount = 64;
#define _red_vertexcount_
#endif
#ifndef _red_indexcount_
const unsigned red_indexcount = 180;
#define _red_indexcount_
#endif
#ifndef _red_materialcount_
const unsigned red_materialcount = 2;
#define _red_materialcount_
#endif
#ifndef _red_meshcount_
const unsigned red_meshcount = 2;
#define _red_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	float pos[3]; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	float uvw[3]; // D3D/Vulkan style top left 0,0 coordinate.
	float nrm[3]; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _red_data_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT red_data[64] =
{
	{	{ 0.314714f, -0.029376f, 0.118519f },	{ 0.501001f, 0.088641f, 0.000000f },	{ -0.499900f, -0.022200f, 0.865800f }	},
	{	{ 0.340149f, -0.029376f, 0.133204f },	{ 0.500249f, 0.088641f, 0.000000f },	{ -0.499900f, -0.022200f, 0.865800f }	},
	{	{ -0.003240f, 3.801368f, 0.033305f },	{ 0.499725f, 0.055130f, 0.000000f },	{ -0.499900f, -0.022200f, 0.865800f }	},
	{	{ -0.097710f, 3.801368f, -0.021237f },	{ 0.501525f, 0.055130f, 0.000000f },	{ -0.499900f, -0.022200f, 0.865800f }	},
	{	{ -0.003240f, 3.801368f, 0.033305f },	{ 0.499725f, 0.055130f, 0.000000f },	{ 0.499900f, 0.022200f, -0.865800f }	},
	{	{ 0.340149f, -0.029376f, 0.133204f },	{ 0.500249f, 0.088641f, 0.000000f },	{ 0.499900f, 0.022200f, -0.865800f }	},
	{	{ 0.314714f, -0.029376f, 0.118519f },	{ 0.501001f, 0.088641f, 0.000000f },	{ 0.499900f, 0.022200f, -0.865800f }	},
	{	{ -0.097710f, 3.801368f, -0.021237f },	{ 0.501525f, 0.055130f, 0.000000f },	{ 0.499900f, 0.022200f, -0.865800f }	},
	{	{ 0.441456f, 4.859043f, -0.293781f },	{ 0.491426f, 0.082235f, 0.000000f },	{ 0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.441456f, 4.859043f, 0.258609f },	{ 0.494830f, 0.086793f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.538437f, 4.368311f, 0.314600f },	{ 0.487523f, 0.088641f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ 0.538437f, 4.368311f, -0.349772f },	{ 0.483428f, 0.083159f, 0.000000f },	{ 0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.515311f, 4.859043f, -0.293781f },	{ 0.494830f, 0.068560f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.036928f, 4.859043f, -0.569976f },	{ 0.491426f, 0.073119f, 0.000000f },	{ 0.000000f, 0.443300f, -0.896400f }	},
	{	{ -0.036928f, 4.368311f, -0.681959f },	{ 0.483428f, 0.072195f, 0.000000f },	{ 0.000000f, -0.126100f, -0.992000f }	},
	{	{ -0.612291f, 4.368311f, -0.349772f },	{ 0.487523f, 0.066712f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.036928f, 4.859043f, 0.534803f },	{ 0.472429f, 0.070491f, 0.000000f },	{ 0.000000f, 0.443300f, 0.896400f }	},
	{	{ -0.515311f, 4.859043f, 0.258609f },	{ 0.477254f, 0.078226f, 0.000000f },	{ -0.776300f, 0.443300f, 0.448200f }	},
	{	{ -0.612291f, 4.368311f, 0.314600f },	{ 0.471006f, 0.083212f, 0.000000f },	{ -0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.036928f, 4.368311f, 0.646787f },	{ 0.465203f, 0.073909f, 0.000000f },	{ 0.000000f, -0.126100f, 0.992000f }	},
	{	{ 0.441456f, 4.859043f, 0.258609f },	{ 0.469466f, 0.066967f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.538437f, 4.368311f, 0.314600f },	{ 0.461640f, 0.069670f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.515311f, 4.859043f, -0.293781f },	{ 0.479116f, 0.082436f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.612291f, 4.368311f, -0.349772f },	{ 0.473246f, 0.088276f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.337782f, 5.071275f, -0.191285f },	{ 0.487011f, 0.051863f, 0.000000f },	{ -0.423300f, 0.872400f, -0.244400f }	},
	{	{ -0.036928f, 5.071275f, -0.364983f },	{ 0.482046f, 0.054729f, 0.000000f },	{ 0.000000f, 0.872400f, -0.488800f }	},
	{	{ -0.036928f, 4.859043f, -0.569976f },	{ 0.479116f, 0.053038f, 0.000000f },	{ 0.000000f, 0.443300f, -0.896400f }	},
	{	{ -0.515311f, 4.859043f, -0.293781f },	{ 0.487011f, 0.048480f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.036928f, 5.071275f, 0.329811f },	{ 0.476082f, 0.070206f, 0.000000f },	{ 0.000000f, 0.872400f, 0.488800f }	},
	{	{ -0.337782f, 5.071275f, 0.156112f },	{ 0.479116f, 0.075070f, 0.000000f },	{ -0.423300f, 0.872400f, 0.244400f }	},
	{	{ 0.263927f, 5.071275f, 0.156112f },	{ 0.487011f, 0.063329f, 0.000000f },	{ 0.423300f, 0.872400f, 0.244400f }	},
	{	{ -0.036928f, 5.071275f, 0.329811f },	{ 0.491976f, 0.060463f, 0.000000f },	{ 0.000000f, 0.872400f, 0.488800f }	},
	{	{ -0.036928f, 4.859043f, 0.534803f },	{ 0.494906f, 0.062154f, 0.000000f },	{ 0.000000f, 0.443300f, 0.896400f }	},
	{	{ 0.441456f, 4.859043f, 0.258609f },	{ 0.487011f, 0.066712f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ -0.036928f, 5.071275f, -0.364983f },	{ 0.495849f, 0.074810f, 0.000000f },	{ 0.000000f, 0.872400f, -0.488800f }	},
	{	{ 0.263927f, 5.071275f, -0.191285f },	{ 0.495849f, 0.080544f, 0.000000f },	{ 0.423300f, 0.872400f, -0.244400f }	},
	{	{ -0.337782f, 5.071275f, 0.156112f },	{ 0.491976f, 0.054729f, 0.000000f },	{ -0.423300f, 0.872400f, 0.244400f }	},
	{	{ -0.515311f, 4.859043f, 0.258609f },	{ 0.494906f, 0.053038f, 0.000000f },	{ -0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.263927f, 5.071275f, -0.191285f },	{ 0.482046f, 0.060463f, 0.000000f },	{ 0.423300f, 0.872400f, -0.244400f }	},
	{	{ 0.441456f, 4.859043f, -0.293781f },	{ 0.479116f, 0.062154f, 0.000000f },	{ 0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.358888f, 3.992890f, 0.210938f },	{ 0.463450f, 0.050941f, 0.000000f },	{ 0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.358888f, 3.992890f, -0.246110f },	{ 0.461150f, 0.058124f, 0.000000f },	{ 0.725900f, -0.545400f, -0.419100f }	},
	{	{ 0.538437f, 4.368311f, -0.349772f },	{ 0.457806f, 0.058850f, 0.000000f },	{ 0.859100f, -0.126100f, -0.496000f }	},
	{	{ 0.538437f, 4.368311f, 0.314600f },	{ 0.461150f, 0.048408f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.036928f, 3.992890f, -0.474634f },	{ 0.466221f, 0.063708f, 0.000000f },	{ 0.000000f, -0.545400f, -0.838200f }	},
	{	{ -0.432742f, 3.992890f, -0.246110f },	{ 0.473592f, 0.062108f, 0.000000f },	{ -0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.612291f, 4.368311f, -0.349772f },	{ 0.475892f, 0.064641f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.036928f, 4.368311f, -0.681959f },	{ 0.465177f, 0.066967f, 0.000000f },	{ 0.000000f, -0.126100f, -0.992000f }	},
	{	{ -0.432742f, 3.992890f, 0.210938f },	{ 0.464655f, 0.085158f, 0.000000f },	{ -0.725900f, -0.545400f, 0.419100f }	},
	{	{ -0.036928f, 3.992890f, 0.439462f },	{ 0.460663f, 0.078758f, 0.000000f },	{ 0.000000f, -0.545400f, 0.838200f }	},
	{	{ 0.358888f, 3.992890f, 0.210938f },	{ 0.458212f, 0.075842f, 0.000000f },	{ 0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.358888f, 3.992890f, -0.246110f },	{ 0.479116f, 0.081448f, 0.000000f },	{ 0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.036928f, 3.992890f, -0.474634f },	{ 0.479116f, 0.073905f, 0.000000f },	{ 0.000000f, -0.545400f, -0.838200f }	},
	{	{ -0.432742f, 3.992890f, -0.246110f },	{ 0.466196f, 0.088641f, 0.000000f },	{ -0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.254796f, 3.738524f, 0.108200f },	{ 0.460003f, 0.086061f, 0.000000f },	{ -0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.036928f, 3.738524f, 0.233986f },	{ 0.457806f, 0.082538f, 0.000000f },	{ 0.000000f, -0.846200f, 0.532800f }	},
	{	{ -0.036928f, 3.738524f, 0.233986f },	{ 0.469787f, 0.052570f, 0.000000f },	{ 0.000000f, -0.846200f, 0.532800f }	},
	{	{ 0.180941f, 3.738524f, 0.108200f },	{ 0.465730f, 0.053451f, 0.000000f },	{ 0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.036928f, 3.992890f, 0.439462f },	{ 0.470821f, 0.049341f, 0.000000f },	{ 0.000000f, -0.545400f, 0.838200f }	},
	{	{ 0.180941f, 3.738524f, -0.143372f },	{ 0.464464f, 0.057405f, 0.000000f },	{ 0.461400f, -0.846200f, -0.266400f }	},
	{	{ -0.036928f, 3.738524f, -0.269158f },	{ 0.467255f, 0.060479f, 0.000000f },	{ 0.000000f, -0.846200f, -0.532800f }	},
	{	{ -0.254796f, 3.738524f, -0.143372f },	{ 0.471312f, 0.059598f, 0.000000f },	{ -0.461400f, -0.846200f, -0.266400f }	},
	{	{ -0.254796f, 3.738524f, 0.108200f },	{ 0.472578f, 0.055644f, 0.000000f },	{ -0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.432742f, 3.992890f, 0.210938f },	{ 0.475892f, 0.054925f, 0.000000f },	{ -0.725900f, -0.545400f, 0.419100f }	},
};
#define _red_data_
#endif
#ifndef _red_indicies_
// Index Data follows: Sequential by mesh, Every Three Indicies == One Triangle.
const unsigned int red_indicies[180] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 16, 19,
	 21, 20, 19,
	 13, 8, 11,
	 14, 13, 11,
	 17, 22, 23,
	 18, 17, 23,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 17,
	 16, 28, 17,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 8,
	 13, 34, 8,
	 36, 24, 27,
	 37, 36, 27,
	 38, 30, 33,
	 39, 38, 33,
	 38, 25, 24,
	 30, 38, 24,
	 31, 30, 24,
	 36, 31, 24,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 49, 19,
	 18, 48, 19,
	 49, 50, 21,
	 19, 49, 21,
	 51, 52, 14,
	 11, 51, 14,
	 53, 48, 18,
	 23, 53, 18,
	 54, 55, 49,
	 48, 54, 49,
	 56, 57, 40,
	 58, 56, 40,
	 59, 60, 44,
	 41, 59, 44,
	 61, 62, 63,
	 45, 61, 63,
	 57, 59, 41,
	 40, 57, 41,
	 60, 61, 45,
	 44, 60, 45,
	 59, 57, 56,
	 60, 59, 56,
	 61, 60, 56,
	 62, 61, 56,
};
#define _red_indicies_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	float       Kd[3]; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	float       Ks[3]; // specular reflectivity
	float       Ns; // specular exponent
	float       Ka[3]; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	float       Tf[3]; // transmission filter
	float       Ni; // optical density (index of refraction)
	float       Ke[3]; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _red_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL red_materials[2] =
{
	{
		{{ 0.600000f, 0.600000f, 0.600000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.500000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"default",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material",
		"a.png",
		"",
		"",
		"",
		"",
		"a.png",
		"",
		"",
		"",
	},
};
#define _red_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _red_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indicies array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int red_batches[2][2] =
{
	{ 0, 0 },
	{ 180, 0 },
};
#define _red_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _red_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH red_meshes[2] =
{
	{
		"default",
		0,
		0,
		0,
	},
	{
		"default",
		180,
		0,
		1,
	},
};
#define _red_meshes_
#endif
