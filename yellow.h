// File generated by "Obj2Header.exe" [Version 1.7]
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _yellow_vertexcount_
const unsigned yellow_vertexcount = 64;
#define _yellow_vertexcount_
#endif
#ifndef _yellow_indexcount_
const unsigned yellow_indexcount = 180;
#define _yellow_indexcount_
#endif
#ifndef _yellow_materialcount_
const unsigned yellow_materialcount = 2;
#define _yellow_materialcount_
#endif
#ifndef _yellow_meshcount_
const unsigned yellow_meshcount = 2;
#define _yellow_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	float pos[3]; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	float uvw[3]; // D3D/Vulkan style top left 0,0 coordinate.
	float nrm[3]; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _yellow_data_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT yellow_data[64] =
{
	{	{ -0.013113f, -4.413216f, -0.151612f },	{ 0.502455f, 0.044868f, 0.000000f },	{ -0.499500f, -0.042900f, 0.865200f }	},
	{	{ 0.012323f, -4.413216f, -0.136927f },	{ 0.501704f, 0.044868f, 0.000000f },	{ -0.499500f, -0.042900f, 0.865200f }	},
	{	{ 0.035327f, -0.603445f, 0.065085f },	{ 0.501179f, 0.011357f, 0.000000f },	{ -0.499500f, -0.042900f, 0.865200f }	},
	{	{ -0.059142f, -0.603445f, 0.010543f },	{ 0.502980f, 0.011357f, 0.000000f },	{ -0.499500f, -0.042900f, 0.865200f }	},
	{	{ 0.035327f, -0.603445f, 0.065085f },	{ 0.501179f, 0.011357f, 0.000000f },	{ 0.499500f, 0.042900f, -0.865200f }	},
	{	{ 0.012323f, -4.413216f, -0.136927f },	{ 0.501704f, 0.044868f, 0.000000f },	{ 0.499500f, 0.042900f, -0.865200f }	},
	{	{ -0.013113f, -4.413216f, -0.151612f },	{ 0.502455f, 0.044868f, 0.000000f },	{ 0.499500f, 0.042900f, -0.865200f }	},
	{	{ -0.059142f, -0.603445f, 0.010543f },	{ 0.502980f, 0.011357f, 0.000000f },	{ 0.499500f, 0.042900f, -0.865200f }	},
	{	{ 0.480023f, 0.454230f, -0.262001f },	{ 0.492880f, 0.038462f, 0.000000f },	{ 0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.480023f, 0.454230f, 0.290389f },	{ 0.496285f, 0.043020f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.577004f, -0.036502f, 0.346380f },	{ 0.488978f, 0.044868f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ 0.577004f, -0.036502f, -0.317992f },	{ 0.484883f, 0.039386f, 0.000000f },	{ 0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.476743f, 0.454230f, -0.262001f },	{ 0.496285f, 0.024787f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.001640f, 0.454230f, -0.538196f },	{ 0.492880f, 0.029346f, 0.000000f },	{ 0.000000f, 0.443300f, -0.896400f }	},
	{	{ 0.001640f, -0.036502f, -0.650178f },	{ 0.484883f, 0.028422f, 0.000000f },	{ 0.000000f, -0.126100f, -0.992000f }	},
	{	{ -0.573723f, -0.036502f, -0.317992f },	{ 0.488978f, 0.022939f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ 0.001640f, 0.454230f, 0.566584f },	{ 0.473883f, 0.026718f, 0.000000f },	{ 0.000000f, 0.443300f, 0.896400f }	},
	{	{ -0.476743f, 0.454230f, 0.290389f },	{ 0.478708f, 0.034453f, 0.000000f },	{ -0.776300f, 0.443300f, 0.448200f }	},
	{	{ -0.573723f, -0.036502f, 0.346380f },	{ 0.472461f, 0.039439f, 0.000000f },	{ -0.859100f, -0.126100f, 0.496000f }	},
	{	{ 0.001640f, -0.036502f, 0.678567f },	{ 0.466657f, 0.030136f, 0.000000f },	{ 0.000000f, -0.126100f, 0.992000f }	},
	{	{ 0.480023f, 0.454230f, 0.290389f },	{ 0.470921f, 0.023194f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.577004f, -0.036502f, 0.346380f },	{ 0.463094f, 0.025897f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ -0.476743f, 0.454230f, -0.262001f },	{ 0.480571f, 0.038663f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ -0.573723f, -0.036502f, -0.317992f },	{ 0.474700f, 0.044503f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ -0.299214f, 0.666462f, -0.159505f },	{ 0.488466f, 0.008090f, 0.000000f },	{ -0.423300f, 0.872400f, -0.244400f }	},
	{	{ 0.001640f, 0.666462f, -0.333203f },	{ 0.483500f, 0.010956f, 0.000000f },	{ 0.000000f, 0.872400f, -0.488800f }	},
	{	{ 0.001640f, 0.454230f, -0.538196f },	{ 0.480571f, 0.009265f, 0.000000f },	{ 0.000000f, 0.443300f, -0.896400f }	},
	{	{ -0.476743f, 0.454230f, -0.262001f },	{ 0.488466f, 0.004707f, 0.000000f },	{ -0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.001640f, 0.666462f, 0.361591f },	{ 0.477536f, 0.026433f, 0.000000f },	{ 0.000000f, 0.872400f, 0.488800f }	},
	{	{ -0.299214f, 0.666462f, 0.187893f },	{ 0.480571f, 0.031297f, 0.000000f },	{ -0.423300f, 0.872400f, 0.244400f }	},
	{	{ 0.302495f, 0.666462f, 0.187893f },	{ 0.488466f, 0.019556f, 0.000000f },	{ 0.423300f, 0.872400f, 0.244400f }	},
	{	{ 0.001640f, 0.666462f, 0.361591f },	{ 0.493431f, 0.016690f, 0.000000f },	{ 0.000000f, 0.872400f, 0.488800f }	},
	{	{ 0.001640f, 0.454230f, 0.566584f },	{ 0.496361f, 0.018381f, 0.000000f },	{ 0.000000f, 0.443300f, 0.896400f }	},
	{	{ 0.480023f, 0.454230f, 0.290389f },	{ 0.488466f, 0.022939f, 0.000000f },	{ 0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.001640f, 0.666462f, -0.333203f },	{ 0.497304f, 0.031037f, 0.000000f },	{ 0.000000f, 0.872400f, -0.488800f }	},
	{	{ 0.302495f, 0.666462f, -0.159505f },	{ 0.497304f, 0.036770f, 0.000000f },	{ 0.423300f, 0.872400f, -0.244400f }	},
	{	{ -0.299214f, 0.666462f, 0.187893f },	{ 0.493431f, 0.010956f, 0.000000f },	{ -0.423300f, 0.872400f, 0.244400f }	},
	{	{ -0.476743f, 0.454230f, 0.290389f },	{ 0.496361f, 0.009265f, 0.000000f },	{ -0.776300f, 0.443300f, 0.448200f }	},
	{	{ 0.302495f, 0.666462f, -0.159505f },	{ 0.483500f, 0.016690f, 0.000000f },	{ 0.423300f, 0.872400f, -0.244400f }	},
	{	{ 0.480023f, 0.454230f, -0.262001f },	{ 0.480571f, 0.018381f, 0.000000f },	{ 0.776300f, 0.443300f, -0.448200f }	},
	{	{ 0.397456f, -0.411923f, 0.242718f },	{ 0.464904f, 0.007167f, 0.000000f },	{ 0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.397456f, -0.411923f, -0.214330f },	{ 0.462604f, 0.014351f, 0.000000f },	{ 0.725900f, -0.545400f, -0.419100f }	},
	{	{ 0.577004f, -0.036502f, -0.317992f },	{ 0.459260f, 0.015077f, 0.000000f },	{ 0.859100f, -0.126100f, -0.496000f }	},
	{	{ 0.577004f, -0.036502f, 0.346380f },	{ 0.462604f, 0.004634f, 0.000000f },	{ 0.859100f, -0.126100f, 0.496000f }	},
	{	{ 0.001640f, -0.411923f, -0.442854f },	{ 0.467675f, 0.019935f, 0.000000f },	{ 0.000000f, -0.545400f, -0.838200f }	},
	{	{ -0.394175f, -0.411923f, -0.214330f },	{ 0.475046f, 0.018335f, 0.000000f },	{ -0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.573723f, -0.036502f, -0.317992f },	{ 0.477347f, 0.020868f, 0.000000f },	{ -0.859100f, -0.126100f, -0.496000f }	},
	{	{ 0.001640f, -0.036502f, -0.650178f },	{ 0.466632f, 0.023194f, 0.000000f },	{ 0.000000f, -0.126100f, -0.992000f }	},
	{	{ -0.394175f, -0.411923f, 0.242718f },	{ 0.466110f, 0.041384f, 0.000000f },	{ -0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.001640f, -0.411923f, 0.471242f },	{ 0.462117f, 0.034985f, 0.000000f },	{ 0.000000f, -0.545400f, 0.838200f }	},
	{	{ 0.397456f, -0.411923f, 0.242718f },	{ 0.459666f, 0.032069f, 0.000000f },	{ 0.725900f, -0.545400f, 0.419100f }	},
	{	{ 0.397456f, -0.411923f, -0.214330f },	{ 0.480571f, 0.037675f, 0.000000f },	{ 0.725900f, -0.545400f, -0.419100f }	},
	{	{ 0.001640f, -0.411923f, -0.442854f },	{ 0.480571f, 0.030132f, 0.000000f },	{ 0.000000f, -0.545400f, -0.838200f }	},
	{	{ -0.394175f, -0.411923f, -0.214330f },	{ 0.467650f, 0.044868f, 0.000000f },	{ -0.725900f, -0.545400f, -0.419100f }	},
	{	{ -0.216227f, -0.666289f, 0.139980f },	{ 0.461458f, 0.042288f, 0.000000f },	{ -0.461400f, -0.846200f, 0.266400f }	},
	{	{ 0.001640f, -0.666289f, 0.265767f },	{ 0.459260f, 0.038765f, 0.000000f },	{ 0.000000f, -0.846200f, 0.532800f }	},
	{	{ 0.001640f, -0.666289f, 0.265767f },	{ 0.471242f, 0.008797f, 0.000000f },	{ 0.000000f, -0.846200f, 0.532800f }	},
	{	{ 0.219508f, -0.666289f, 0.139980f },	{ 0.467184f, 0.009678f, 0.000000f },	{ 0.461400f, -0.846200f, 0.266400f }	},
	{	{ 0.001640f, -0.411923f, 0.471242f },	{ 0.472276f, 0.005568f, 0.000000f },	{ 0.000000f, -0.545400f, 0.838200f }	},
	{	{ 0.219508f, -0.666289f, -0.111592f },	{ 0.465918f, 0.013632f, 0.000000f },	{ 0.461400f, -0.846200f, -0.266400f }	},
	{	{ 0.001640f, -0.666289f, -0.237378f },	{ 0.468709f, 0.016705f, 0.000000f },	{ 0.000000f, -0.846200f, -0.532800f }	},
	{	{ -0.216227f, -0.666289f, -0.111592f },	{ 0.472767f, 0.015825f, 0.000000f },	{ -0.461400f, -0.846200f, -0.266400f }	},
	{	{ -0.216227f, -0.666289f, 0.139980f },	{ 0.474033f, 0.011871f, 0.000000f },	{ -0.461400f, -0.846200f, 0.266400f }	},
	{	{ -0.394175f, -0.411923f, 0.242718f },	{ 0.477347f, 0.011152f, 0.000000f },	{ -0.725900f, -0.545400f, 0.419100f }	},
};
#define _yellow_data_
#endif
#ifndef _yellow_indicies_
// Index Data follows: Sequential by mesh, Every Three Indicies == One Triangle.
const unsigned int yellow_indicies[180] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 16, 19,
	 21, 20, 19,
	 13, 8, 11,
	 14, 13, 11,
	 17, 22, 23,
	 18, 17, 23,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 17,
	 16, 28, 17,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 8,
	 13, 34, 8,
	 36, 24, 27,
	 37, 36, 27,
	 38, 30, 33,
	 39, 38, 33,
	 30, 38, 25,
	 31, 30, 25,
	 36, 31, 25,
	 24, 36, 25,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 49, 19,
	 18, 48, 19,
	 49, 50, 21,
	 19, 49, 21,
	 51, 52, 14,
	 11, 51, 14,
	 53, 48, 18,
	 23, 53, 18,
	 54, 55, 49,
	 48, 54, 49,
	 56, 57, 40,
	 58, 56, 40,
	 59, 60, 44,
	 41, 59, 44,
	 61, 62, 63,
	 45, 61, 63,
	 57, 59, 41,
	 40, 57, 41,
	 60, 61, 45,
	 44, 60, 45,
	 61, 60, 59,
	 62, 61, 59,
	 56, 62, 59,
	 57, 56, 59,
};
#define _yellow_indicies_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	float       Kd[3]; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	float       Ks[3]; // specular reflectivity
	float       Ns; // specular exponent
	float       Ka[3]; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	float       Tf[3]; // transmission filter
	float       Ni; // optical density (index of refraction)
	float       Ke[3]; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _yellow_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL yellow_materials[2] =
{
	{
		{{ 0.600000f, 0.600000f, 0.600000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.500000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"default",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material",
		"a.png",
		"",
		"",
		"",
		"",
		"a.png",
		"",
		"",
		"",
	},
};
#define _yellow_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _yellow_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indicies array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int yellow_batches[2][2] =
{
	{ 0, 0 },
	{ 180, 0 },
};
#define _yellow_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _yellow_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH yellow_meshes[2] =
{
	{
		"default",
		0,
		0,
		0,
	},
	{
		"default",
		180,
		0,
		1,
	},
};
#define _yellow_meshes_
#endif
